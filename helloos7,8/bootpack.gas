	.file	"bootpack.c"
	.data
LC0:
	.ascii "(%3d, %3d)\0"
LC2:
	.ascii "[lcr %4d %4d]\0"
LC1:
	.ascii "%02X\0"
	.text
	.balign 2
.globl _HariMain
	.def	_HariMain;	.scl	2;	.type	32;	.endef
_HariMain:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%edi
	pushl	%esi
	pushl	%ebx
	movl	$2, %ebx
	subl	$484, %esp
	call	_init_gdtidt
	call	_init_pic
	call	_io_sti
	leal	-348(%ebp), %eax
	pushl	%eax
	pushl	$32
	pushl	$_keyfifo
	call	_fifo8_init
	leal	-476(%ebp), %eax
	pushl	%eax
	pushl	$128
	pushl	$_mousefifo
	call	_fifo8_init
	pushl	$249
	pushl	$33
	call	_io_out8
	addl	$32, %esp
	pushl	$239
	pushl	$161
	call	_io_out8
	call	_init_keyboard
	call	_init_palette
	movswl	4086,%eax
	pushl	%eax
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_init_screen8
	movswl	4084,%eax
	leal	-16(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	movswl	4086,%eax
	pushl	$14
	leal	-44(%eax), %ecx
	movl	%ecx, %eax
	cltd
	idivl	%ebx
	leal	-316(%ebp), %ebx
	movl	%eax, %esi
	pushl	%ebx
	call	_init_mouse_cursor8
	pushl	$16
	pushl	%ebx
	leal	-60(%ebp), %ebx
	pushl	%esi
	pushl	%edi
	pushl	$16
	pushl	$16
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putblock8_8
	addl	$60, %esp
	pushl	%esi
	pushl	%edi
	pushl	$LC0
	pushl	%ebx
	call	_sprintf
	pushl	%ebx
	pushl	$7
	pushl	$0
	pushl	$0
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putfonts8_asc
	leal	-492(%ebp), %eax
	addl	$40, %esp
	pushl	%eax
	call	_enable_mouse
	popl	%ecx
L2:
	call	_io_cli
	pushl	$_keyfifo
	call	_fifo8_status
	pushl	$_mousefifo
	movl	%eax, %ebx
	call	_fifo8_status
	leal	(%eax,%ebx), %eax
	popl	%ebx
	popl	%edx
	testl	%eax, %eax
	je	L18
	pushl	$_keyfifo
	call	_fifo8_status
	popl	%ecx
	testl	%eax, %eax
	jne	L19
	pushl	$_mousefifo
	call	_fifo8_status
	popl	%edx
	testl	%eax, %eax
	je	L2
	pushl	$_mousefifo
	call	_fifo8_get
	movl	%eax, %ebx
	call	_io_sti
	movzbl	%bl, %eax
	pushl	%eax
	leal	-492(%ebp), %eax
	pushl	%eax
	call	_mouse_decode
	addl	$12, %esp
	testl	%eax, %eax
	je	L2
	pushl	-484(%ebp)
	pushl	-488(%ebp)
	pushl	$LC2
	leal	-60(%ebp), %ebx
	pushl	%ebx
	call	_sprintf
	addl	$16, %esp
	movl	-480(%ebp), %eax
	testl	$1, %eax
	je	L11
	movb	$76, -59(%ebp)
L11:
	testl	$2, %eax
	je	L12
	movb	$82, -57(%ebp)
L12:
	andl	$4, %eax
	je	L13
	movb	$67, -58(%ebp)
L13:
	pushl	$31
	pushl	$151
	pushl	$16
	pushl	$32
	pushl	$14
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_boxfill8
	pushl	%ebx
	pushl	$7
	pushl	$16
	pushl	$32
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putfonts8_asc
	leal	15(%esi), %eax
	addl	$52, %esp
	pushl	%eax
	leal	15(%edi), %eax
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	$14
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_boxfill8
	addl	$28, %esp
	addl	-484(%ebp), %esi
	addl	-488(%ebp), %edi
	js	L20
L14:
	testl	%esi, %esi
	js	L21
L15:
	movswl	4084,%eax
	subl	$16, %eax
	cmpl	%eax, %edi
	jle	L16
	movl	%eax, %edi
L16:
	movswl	4086,%eax
	subl	$16, %eax
	cmpl	%eax, %esi
	jle	L17
	movl	%eax, %esi
L17:
	pushl	%esi
	pushl	%edi
	pushl	$LC0
	pushl	%ebx
	call	_sprintf
	pushl	$15
	pushl	$79
	pushl	$0
	pushl	$0
	pushl	$14
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_boxfill8
	addl	$44, %esp
	pushl	%ebx
	pushl	$7
	pushl	$0
	pushl	$0
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putfonts8_asc
	leal	-316(%ebp), %eax
	pushl	$16
	pushl	%eax
	pushl	%esi
	pushl	%edi
	pushl	$16
	pushl	$16
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putblock8_8
	addl	$56, %esp
	jmp	L2
L21:
	xorl	%esi, %esi
	jmp	L15
L20:
	xorl	%edi, %edi
	jmp	L14
L19:
	pushl	$_keyfifo
	call	_fifo8_get
	movl	%eax, %ebx
	call	_io_sti
	pushl	%ebx
	leal	-60(%ebp), %ebx
	pushl	$LC1
	pushl	%ebx
	call	_sprintf
	pushl	$31
	pushl	$15
	pushl	$16
	pushl	$0
	pushl	$14
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_boxfill8
	addl	$44, %esp
	pushl	%ebx
	pushl	$7
	pushl	$16
	pushl	$0
	movswl	4084,%eax
	pushl	%eax
	pushl	4088
	call	_putfonts8_asc
	addl	$24, %esp
	jmp	L2
L18:
	call	_io_stihlt
	jmp	L2
	.balign 2
.globl _wait_KBC_sendready
	.def	_wait_KBC_sendready;	.scl	2;	.type	32;	.endef
_wait_KBC_sendready:
	pushl	%ebp
	movl	%esp, %ebp
L23:
	pushl	$100
	call	_io_in8
	popl	%edx
	andl	$2, %eax
	jne	L23
	leave
	ret
	.balign 2
.globl _init_keyboard
	.def	_init_keyboard;	.scl	2;	.type	32;	.endef
_init_keyboard:
	pushl	%ebp
	movl	%esp, %ebp
	call	_wait_KBC_sendready
	pushl	$96
	pushl	$100
	call	_io_out8
	call	_wait_KBC_sendready
	pushl	$71
	pushl	$96
	call	_io_out8
	leave
	ret
	.balign 2
.globl _enable_mouse
	.def	_enable_mouse;	.scl	2;	.type	32;	.endef
_enable_mouse:
	pushl	%ebp
	movl	%esp, %ebp
	call	_wait_KBC_sendready
	pushl	$212
	pushl	$100
	call	_io_out8
	call	_wait_KBC_sendready
	pushl	$244
	pushl	$96
	call	_io_out8
	movl	8(%ebp), %eax
	movb	$0, 3(%eax)
	leave
	ret
	.balign 2
.globl _mouse_decode
	.def	_mouse_decode;	.scl	2;	.type	32;	.endef
_mouse_decode:
	pushl	%ebp
	movl	%esp, %ebp
	pushl	%esi
	pushl	%ebx
	movl	8(%ebp), %edx
	movl	12(%ebp), %ecx
	movl	%ecx, %esi
	movb	3(%edx), %al
	testb	%al, %al
	jne	L30
	cmpb	$-6, %cl
	je	L39
L38:
	xorl	%eax, %eax
L29:
	popl	%ebx
	popl	%esi
	popl	%ebp
	ret
L39:
	movb	$1, 3(%edx)
	jmp	L38
L30:
	cmpb	$1, %al
	je	L40
	cmpb	$2, %al
	je	L41
	cmpb	$3, %al
	je	L42
	orl	$-1, %eax
	jmp	L29
L42:
	movb	(%edx), %bl
	andl	$255, %esi
	movl	%ebx, %eax
	movb	%cl, 2(%edx)
	andl	$7, %eax
	movl	%esi, 8(%edx)
	movl	%eax, 12(%edx)
	movb	%bl, %al
	movzbl	1(%edx), %ecx
	andl	$16, %eax
	movl	%ecx, 4(%edx)
	movb	$1, 3(%edx)
	testb	%al, %al
	je	L36
	orl	$-256, %ecx
	movl	%ecx, 4(%edx)
L36:
	andl	$32, %ebx
	testb	%bl, %bl
	je	L37
	orl	$-256, 8(%edx)
L37:
	negl	8(%edx)
	movl	$1, %eax
	jmp	L29
L41:
	movb	%cl, 1(%edx)
	movb	$3, 3(%edx)
	jmp	L38
L40:
	andl	$-56, %esi
	movl	%esi, %eax
	cmpb	$8, %al
	jne	L38
	movb	%cl, (%edx)
	movb	$2, 3(%edx)
	jmp	L38
	.def	_io_in8;	.scl	2;	.type	32;	.endef
	.def	_mouse_decode;	.scl	2;	.type	32;	.endef
	.def	_boxfill8;	.scl	2;	.type	32;	.endef
	.def	_fifo8_get;	.scl	2;	.type	32;	.endef
	.def	_io_stihlt;	.scl	2;	.type	32;	.endef
	.def	_fifo8_status;	.scl	2;	.type	32;	.endef
	.def	_io_cli;	.scl	2;	.type	32;	.endef
	.def	_enable_mouse;	.scl	2;	.type	32;	.endef
	.def	_putfonts8_asc;	.scl	2;	.type	32;	.endef
	.def	_sprintf;	.scl	2;	.type	32;	.endef
	.def	_putblock8_8;	.scl	2;	.type	32;	.endef
	.def	_init_mouse_cursor8;	.scl	2;	.type	32;	.endef
	.def	_init_screen8;	.scl	2;	.type	32;	.endef
	.def	_init_palette;	.scl	2;	.type	32;	.endef
	.def	_init_keyboard;	.scl	2;	.type	32;	.endef
	.def	_io_out8;	.scl	2;	.type	32;	.endef
	.def	_fifo8_init;	.scl	2;	.type	32;	.endef
	.def	_io_sti;	.scl	2;	.type	32;	.endef
	.def	_init_pic;	.scl	2;	.type	32;	.endef
	.def	_init_gdtidt;	.scl	2;	.type	32;	.endef
